<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Color x:Key="HighlightColor">#8ac631</Color>
    <!--Blue:#434f74-->
    <!--Green:#8ac631-->
    <Color x:Key="AlertColor">#bb4444</Color>
    <Color x:Key="HighlightTextColor">#111</Color>
    <Color x:Key="NormalColor">#404040</Color>
    <Color x:Key="NormalTextColor">#ddd</Color>
    <Color x:Key="NormalTextMouseOverColor">#fff</Color>
    <Color x:Key="BorderColor">#555</Color>
    <Color x:Key="BackgroundColor">#333</Color>
    <Color x:Key="HyperlinkColor">#59f</Color>
    <Color x:Key="SubtleColor">#777</Color>
    <Color x:Key="TranslucidColor">#a777</Color>
    <Color x:Key="TextSelectionColor">#777</Color>
    <Color x:Key="TextSelectionHighlightColor">#444</Color>

    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{StaticResource HighlightColor}"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="{StaticResource HighlightTextColor}"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="{StaticResource NormalColor}"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="{StaticResource NormalTextColor}"/>


    <!--This are the brushes that must be referenced by controls-->
    <SolidColorBrush x:Key="Highlight1" Color="{StaticResource HighlightColor}"/>
    <SolidColorBrush x:Key="Alert1" Color="{StaticResource AlertColor}"/>
    <SolidColorBrush x:Key="HighlightText1" Color="{StaticResource HighlightTextColor}"/>
    <SolidColorBrush x:Key="Normal1" Color="{StaticResource NormalColor}"/>
    <SolidColorBrush x:Key="NormalText1" Color="{StaticResource NormalTextColor}"/>
    <SolidColorBrush x:Key="NormalTextMouseOver1" Color="{StaticResource NormalTextMouseOverColor}"/>
    <SolidColorBrush x:Key="Subtle1" Color="{StaticResource SubtleColor}"/>
    <SolidColorBrush x:Key="Border1" Color="{StaticResource BorderColor}"/>
    <SolidColorBrush x:Key="Background1" Color="{StaticResource BackgroundColor}"/>
    <SolidColorBrush x:Key="Hyperlink1" Color="{StaticResource HyperlinkColor}"/>
    <SolidColorBrush x:Key="Translucid1" Color="{StaticResource TranslucidColor}"/>
    <SolidColorBrush x:Key="TextSelection1" Color="{StaticResource TextSelectionColor}"/>
    <SolidColorBrush x:Key="TextSelectionHighlight1" Color="{StaticResource TextSelectionHighlightColor}"/>

    <!--Text decoration (green dashed underline)-->
    <TextDecorationCollection x:Key="TextDecoration">
        <TextDecoration PenThicknessUnit="Pixel" PenOffset="2">
            <TextDecoration.Pen>
                <Pen Thickness="1" Brush="{DynamicResource Highlight1}">
                    <Pen.DashStyle>
                        <DashStyle Dashes="1, 2"/>
                    </Pen.DashStyle>
                </Pen>
            </TextDecoration.Pen>
        </TextDecoration>
    </TextDecorationCollection>

    <!--Text decoration (black dashed underline)-->
    <TextDecorationCollection x:Key="TextDecorationHighlight">
        <TextDecoration PenThicknessUnit="Pixel" PenOffset="2">
            <TextDecoration.Pen>
                <Pen Thickness="1" Brush="{DynamicResource HighlightText1}">
                    <Pen.DashStyle>
                        <DashStyle Dashes="1, 2"/>
                    </Pen.DashStyle>
                </Pen>
            </TextDecoration.Pen>
        </TextDecoration>
    </TextDecorationCollection>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource NormalText1}"/>
        <Setter Property="TextDecorations" Value="{StaticResource TextDecoration}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource NormalText1}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource TextSelection1}"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="BorderThickness" Value="0"/>
        <!--<Setter Property="MinWidth" Value="80"/>-->
        <Setter Property="Padding" Value="2 0 2 0"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource HighlightText1}"/>
                <Setter Property="CaretBrush" Value="{DynamicResource HighlightText1}"/>
                <Setter Property="SelectionBrush" Value="{DynamicResource textSelectionHightlight1}"/>
                <Setter Property="TextDecorations" Value="{StaticResource TextDecorationHighlight}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
        <!--HACK Remove this as it's only valid for Inspector:-->
        <!--<Setter Property="MaxWidth" Value="200"/>
        <Setter Property="MinWidth" Value="60"/>-->
    </Style>

    <!--<Style TargetType="{x:Type Track}">
        <Setter Property=""
    </Style>-->

    <!--<Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <ScrollContentPresenter Grid.Column="0"/>

                        <ScrollBar Name="PART_VerticalScrollBar"
                            Grid.Column="1"
                            Grid.Row="0"
                            Value="{TemplateBinding VerticalOffset}"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Background="Transparent"/>
                        <ScrollBar Name="PART_HorizontalScrollBar"
                            Orientation="Horizontal"
                            Grid.Row="1"
                            Grid.Column="0"
                            Value="{TemplateBinding HorizontalOffset}"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <!-- Style for Buttons -->
    <Style TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0.5"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{DynamicResource Normal1}"/>
        <Setter Property="Foreground" Value="{DynamicResource NormalText1}"/>
        <Setter Property="Padding" Value="3 0 3 0"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" CornerRadius="0">
                        <ContentPresenter
                                 HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                 Margin="0"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource Highlight1}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Subtle1}" />
            </Trigger>
        </Style.Triggers>
    </Style>
  
    <!-- Style for ToggleButton -->
    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="IsThreeState" Value="false"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="3 0 3 0"/>
        <Setter Property="Margin" Value="0.5"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" CornerRadius="0">
                            <ContentPresenter
                             HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                             VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                             Margin="0"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource Highlight1}"/>
                <Setter Property="Foreground" Value="{DynamicResource HighlightText1}"/>
                <Setter Property="Content" Value="True"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Background" Value="{DynamicResource Normal1}"/>
                <Setter Property="Foreground" Value="{DynamicResource NormalText1}"/>
                <Setter Property="Content" Value="False"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource Highlight1}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <DropShadowEffect x:Key="DropShadow" BlurRadius="5" Direction="315" Opacity="0.8" ShadowDepth="0"/>

    <!--Style for ContextMenus-->
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Name="OuterBorder" Background="Transparent">
                        <Border x:Name="Border"
                                Background="{StaticResource Normal1}"
                                BorderThickness="1" BorderBrush="{DynamicResource Border1}">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <!--<Setter TargetName="Border" Property="Background" Value="Transparent"/>-->
                            <Setter TargetName="OuterBorder" Property="Padding" Value="5 5 5 5"/>
                            <Setter TargetName="Border" Property="Effect" Value="{StaticResource DropShadow}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Menu Items with children-->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
      <Grid>
        <Border MinWidth="{TemplateBinding MinWidth}" Name="Border" Background="{TemplateBinding Background}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <ContentPresenter Margin="14 2 2 0" Name="HeaderHost" ContentSource="Header"/>
                    <Path Grid.Column="1" Fill="{StaticResource NormalText1}" Margin="4" Data="M 4 0 L 8 4 L 4 8 Z"/>
                </Grid>
            </Border>
        <Popup
            Name="Popup"
            Placement="Right"
            IsOpen="{TemplateBinding IsSubmenuOpen}"
            AllowsTransparency="True"
            Focusable="False"
            PopupAnimation="Fade"
            HorizontalOffset="-4">
          <Border
              Name="SubmenuBorder"
              SnapsToDevicePixels="True"
              Background="{DynamicResource Background1}"
              BorderBrush="{DynamicResource Border1}"
              BorderThickness="1" >
            <StackPanel
                IsItemsHost="True"
                KeyboardNavigation.DirectionalNavigation="Cycle" />
          </Border>

        </Popup>
      </Grid>
      <ControlTemplate.Triggers>
        <Trigger Property="IsMouseOver" Value="True">
          <Setter Property="Background" Value="{DynamicResource Highlight1}"/>
          <Setter Property="Foreground" Value="{DynamicResource HighlightText1}"/>
        </Trigger>
      </ControlTemplate.Triggers>
    </ControlTemplate>
      

    <!--Menu Items without chlidren (i.e. Actual actions)-->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Grid>
            <Border MinWidth="{TemplateBinding MinWidth}" Name="Border" Background="{TemplateBinding Background}">
              <StackPanel Orientation="Horizontal">
                <Path Margin="2" Name="checkSign" Opacity="1" Data="M 2 5 L 3 9 9 2" Stroke="{DynamicResource Highlight1}" StrokeThickness="2"
                    StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" StrokeLineJoin="Bevel" />
                <ContentPresenter Margin="2 2 2 0" Name="HeaderHost" ContentSource="Header"/>
              </StackPanel>
            </Border>
        </Grid>
          <ControlTemplate.Triggers>
              <Trigger Property="IsMouseOver" Value="True">
                  <Setter Property="Background" Value="{DynamicResource Highlight1}"/>
                  <Setter Property="Foreground" Value="{DynamicResource HighlightText1}"/>
              </Trigger>
            <Trigger Property="IsCheckable" Value="False">
              <Setter TargetName="checkSign" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
              <Setter TargetName="checkSign" Property="Opacity" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
      </ControlTemplate>

    <Style x:Key="{x:Type MenuItem}" TargetType="MenuItem">
      <Setter Property="Foreground" Value="{DynamicResource NormalText1}"/>
      <Setter Property="Background" Value="Transparent"/>
      <Setter Property="MinWidth" Value="150"/>
      <Setter Property="OverridesDefaultStyle" Value="True"/>
      <Style.Triggers>
        <!-- We're not worrying about the top level because they're not being used right now. -->
        <!--<Trigger Property="Role" Value="TopLevelHeader">
          <Setter Property="Template"
                  Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
          <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
        </Trigger>
        <Trigger Property="Role" Value="TopLevelItem">
          <Setter Property="Template"
                  Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
        </Trigger>-->
      <Trigger Property="Role" Value="SubmenuHeader">
        <Setter Property="Template"
                Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
      </Trigger>
      <Trigger Property="Role" Value="SubmenuItem">
        <Setter Property="Template"
                Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
      </Trigger>
      </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
        <Setter Property="Height" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Rectangle Height="{TemplateBinding Height}" Fill="{StaticResource Subtle1}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--Style for Tab Controls-->
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="1"/>
    </Style>
    <Style TargetType="{x:Type TabItem}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource Highlight1}"/>
                <Setter Property="Foreground" Value="{StaticResource HighlightText1}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{StaticResource Normal1}"/>
        <Setter Property="Foreground" Value="{StaticResource NormalText1}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border 
                         Name="Border"
                         Background="{TemplateBinding Property=Background}"
                         BorderBrush="{DynamicResource Border1}" 
                         BorderThickness="1,1,1,0" 
                         CornerRadius="0,0,0,0" >
                            <ContentPresenter x:Name="ContentSite"
                             VerticalAlignment="Center"
                             HorizontalAlignment="Center"
                             ContentSource="Header"
                             Margin="8,2,8,2"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style for Expander-->
    <!--Control colors.-->
    <Color x:Key="WindowColor">#FFE8EDF9</Color>
    <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
    <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>
    <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
    <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
    <Color x:Key="DisabledForegroundColor">#FF888888</Color>
    <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
    <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>
    <Color x:Key="ControlLightColor">White</Color>
    <Color x:Key="ControlMediumColor">#FF7381F9</Color>
    <Color x:Key="ControlDarkColor">#FF211AA9</Color>
    <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
    <Color x:Key="ControlPressedColor">#FF211AA9</Color>
    <Color x:Key="GlyphColor">#FF444444</Color>
    <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>
    <!--Border colors-->
    <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
    <Color x:Key="BorderMediumColor">#FF888888</Color>
    <Color x:Key="BorderDarkColor">#FF444444</Color>
    <Color x:Key="PressedBorderLightColor">#FF888888</Color>
    <Color x:Key="PressedBorderDarkColor">#FF444444</Color>
    <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
    <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>
    <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>
    <!--Control-specific resources.-->
    <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
    <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
    <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>
    <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>
    <SolidColorBrush x:Key="GlyphBrush" Color="#DDD" />
    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid
                     Width="15"
                     Height="13"
                     Background="Transparent">
            <Path x:Name="ExpandPath"
                         HorizontalAlignment="Left"
                         VerticalAlignment="Center"
                         Margin="1,1,1,1"
                         Fill="{StaticResource GlyphBrush}"
                         Data="M 4 0 L 8 4 L 4 8 Z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked"
                         Value="True">
                <Setter Property="Data"
                             TargetName="ExpandPath"
                             Value="M 0 4 L 8 4 L 4 8 Z"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Expander}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition x:Name="ContentRow"
                           Height="0" />
                        </Grid.RowDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Disabled">
                                    <!--<Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Panel.Background).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledControlDarkColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Border.BorderBrush).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource DisabledBorderLightColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>-->
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border"
                          Grid.Row="0"
                          BorderThickness="0"
                          CornerRadius="0,0,0,0"
                          Background="Transparent">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton OverridesDefaultStyle="True"
                                 Template="{StaticResource ExpanderToggleButton}"
                                 IsChecked="{Binding IsExpanded, Mode=TwoWay, 
                                 RelativeSource={RelativeSource TemplatedParent}}">
                                    <!--<ToggleButton.Background>
                                        <LinearGradientBrush EndPoint="0.5,1"
                                       StartPoint="0.5,0">
                                            <GradientStop Color="{DynamicResource ControlLightColor}"
                                  Offset="0" />
                                            <GradientStop Color="{DynamicResource ControlMediumColor}"
                                  Offset="1" />
                                        </LinearGradientBrush>
                                    </ToggleButton.Background>-->
                                </ToggleButton>
                                <ContentPresenter Grid.Column="1"
                                 Margin="1"
                                 ContentSource="Header"
                                 RecognizesAccessKey="True" />
                            </Grid>
                        </Border>
                        <Border x:Name="Content"
                         Grid.Row="1"
                         BorderThickness="0,0,0,0"
                         CornerRadius="0,0,0,0"
                         Background="Transparent">
                            <!--<Border.BorderBrush>
                                <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                            </Border.BorderBrush>
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource ContentAreaColorDark}" />
                            </Border.Background>-->
                            <ContentPresenter Margin="1" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                   Value="True">
                            <Setter TargetName="ContentRow"
                    Property="Height"
                    Value="{Binding DesiredHeight, ElementName=Content}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{DynamicResource Normal1}"/>
    </Style>
    
    <Style x:Name="listBoxItemNoSelection" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Left" 
                                Margin="{TemplateBinding Padding}" 
                                x:Name="contentPresenter" Content="{TemplateBinding Content}" 
                                ContentTemplate="{TemplateBinding ContentTemplate}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GridViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource NormalText1}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border BorderThickness="0" Background="{TemplateBinding Background}">
                        <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource NormalTextMouseOver1}"/>
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource Highlight1}"/>
                <Setter Property="Foreground" Value="{DynamicResource HighlightText1}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

  <Style TargetType="{x:Type CheckBox}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CheckBox">
          <Border Name="border" Background="{StaticResource Border1}" Width="12" Height="12" Margin="1">
            <Border Name="back" Background="{StaticResource Background1}" Width="10" Height="10">
              <Grid>
              <Path Name="checkSign" Opacity="0" Data="M 2 5 L 3 9 9 2" Stroke="{DynamicResource Highlight1}" StrokeThickness="2"
                    StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" StrokeLineJoin="Bevel" />
              <Border Name="over" Background="#666" Opacity="0"/>
              </Grid>
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Opacity" TargetName="checkSign" Value="1"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" TargetName="over" Value="0.6"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="StrokeThickness" TargetName="checkSign" Value="2.5"/>
              <Setter Property="Background" TargetName="border" Value="#777"/>
            </Trigger>
            
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
    
</ResourceDictionary>